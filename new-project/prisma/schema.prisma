// Product Label Checker - Prisma Schema
// Production-ready schema with proper relations and naming

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// Authentication & User Management
// ============================================

model OAuthAccount {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("oauth_accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified") // NextAuth standard - null means not verified
  image         String?
  password      String?   // Only set for email/password auth
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true) @map("is_active") // User account status
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  oauthAccounts       OAuthAccount[]
  sessions            Session[]
  ownedAccounts       Account[]            @relation("AccountOwner")
  accountMemberships  AccountMember[]
  sentInvites         AccountInvite[]      @relation("InvitedByUser")
  passwordResetTokens PasswordResetToken[]

  @@index([email])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

// ============================================
// Workspace/Account Management
// ============================================

model Account {
  id                   String             @id @default(uuid())
  name                 String             // Workspace/Business name
  slug                 String             @unique // URL-friendly identifier
  ownerId              String             @map("owner_id")
  plan                 Plan               @default(FREE)
  stripeCustomerId     String?            @unique @map("stripe_customer_id")
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  subscriptionStatus   SubscriptionStatus @default(INACTIVE) @map("subscription_status")
  subscriptionCancelAt DateTime?          @map("subscription_cancel_at") // When subscription will end (for scheduled cancellations)
  isActive             Boolean            @default(true) @map("is_active") // Account status
  businessName         String?            @map("business_name")
  primaryMarketplace   String?            @map("primary_marketplace")
  productCategories    String[]           @default([]) @map("product_categories")
  billingEmail         String?            @map("billing_email")
  // Scan limits (based on plan)
  scanLimitPerMonth    Int?               @map("scan_limit_per_month") // null = unlimited
  scansUsedThisMonth   Int                @default(0) @map("scans_used_this_month")
  scanLimitResetAt     DateTime?          @map("scan_limit_reset_at") // Track monthly reset
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  owner    User            @relation("AccountOwner", fields: [ownerId], references: [id], onDelete: Restrict)
  members  AccountMember[]
  invites  AccountInvite[]
  scans    Scan[]
  payments Payment[]

  @@index([ownerId])
  @@index([slug])
  @@map("accounts")
}

model AccountMember {
  id          String              @id @default(uuid())
  accountId   String              @map("account_id")
  userId      String              @map("user_id")
  role        AccountRole         @default(VIEWER)
  permissions AccountPermission[] @default([])
  invitedBy   String?             @map("invited_by") // User ID who invited
  isActive    Boolean             @default(true) @map("is_active") // Member status
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accountId, userId])
  @@index([accountId])
  @@index([userId])
  @@map("account_members")
}

model AccountInvite {
  id        String              @id @default(uuid())
  accountId String              @map("account_id")
  email     String
  role      AccountRole         @default(VIEWER)
  permissions AccountPermission[] @default([])
  invitedBy String              @map("invited_by") // User ID who invited
  token     String              @unique
  expiresAt DateTime            @map("expires_at")
  createdAt DateTime            @default(now()) @map("created_at")

  account        Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  invitedByUser  User    @relation("InvitedByUser", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([accountId, email])
  @@index([accountId])
  @@index([invitedBy])
  @@index([token])
  @@map("account_invites")
}

// ============================================
// Product Scanning & Compliance
// ============================================

model Scan {
  id               String      @id @default(uuid())
  accountId        String      @map("account_id")
  createdBy        String      @map("created_by") // User ID who created the scan
  productName      String      @map("product_name")
  category         Category
  marketplaces     String[]    // Array of marketplace codes: ["USA", "UK", "DE"]
  labelUrl         String      @map("label_url") // URL to uploaded label image in MinIO
  originalFilename String?     @map("original_filename") // Original uploaded filename
  extractedText    String?     @map("extracted_text") @db.Text // OCR extracted text
  results          Json?       // Full compliance results as JSON (includes AI-extracted info)
  score            Int?        // Overall compliance score (0-100)
  riskLevel        RiskLevel?  @map("risk_level") // HIGH, MEDIUM, LOW, CRITICAL
  status           ScanStatus  @default(PROCESSING)
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  issues  Issue[]

  @@index([accountId])
  @@index([createdBy])
  @@index([createdAt])
  @@map("scans")
}

model Issue {
  id            String      @id @default(uuid())
  scanId        String      @map("scan_id")
  requirement   String      // e.g., "Choking Hazard Warning"
  marketplace   String      // USA, UK, DE
  category      Category
  criticality   Criticality // CRITICAL, WARNING, RECOMMENDATION
  status        IssueStatus @default(FAILED) // PASSED, FAILED, WARNING
  description   String      @db.Text // Human-readable description
  suggestion    String      @db.Text // Actionable suggestion
  regulation    String?     // Reference to specific regulation
  priority      String?     // Fix priority guidance
  visualExample String?     @map("visual_example") // URL to example image
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  scan Scan @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@index([scanId])
  @@map("issues")
}

model RegulatoryRule {
  id            String      @id @default(uuid())
  category      Category
  marketplace   String      // USA, UK, DE
  requirement   String      // e.g., "Choking Hazard Warning"
  description   String      @db.Text // Detailed description
  regulation    String      // Official regulation reference
  criticality   Criticality
  isRequired    Boolean     @default(true) @map("is_required")
  example       String?     @db.Text // Example of compliant text
  visualExample String?     @map("visual_example") // URL to example image
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([category, marketplace, requirement])
  @@index([category])
  @@index([marketplace])
  @@map("regulatory_rules")
}

// ============================================
// Payments & Billing
// ============================================

model Payment {
  id              String        @id @default(uuid())
  accountId       String        @map("account_id")
  stripePaymentId String        @unique @map("stripe_payment_id")
  amount          Int           // Amount in cents
  currency        String        @default("usd")
  plan            Plan
  status          PaymentStatus @default(PENDING)
  invoiceUrl      String?       @map("invoice_url")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([stripePaymentId])
  @@map("payments")
}

// ============================================
// System Settings
// ============================================

model SystemSettings {
  id                String   @id @default("system_settings") // Singleton pattern
  masterPrompt      String?  @db.Text @map("master_prompt") // AI prompt for label analysis
  commonRules       String?  @db.Text @map("common_rules") // Common compliance rules for all countries (Markdown)
  usRules           String?  @db.Text @map("us_rules") // US-specific compliance rules (Markdown)
  ukRules           String?  @db.Text @map("uk_rules") // UK-specific compliance rules (Markdown)
  euRules           String?  @db.Text @map("eu_rules") // EU/Germany-specific compliance rules (Markdown)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

// ============================================
// Enums
// ============================================

enum Plan {
  FREE      // Free plan - 3 scans per month
  DELUXE    // $29.99/month - unlimited scans + team
  ONE_TIME  // $40 - single comprehensive scan
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

enum UserRole {
  USER      // Regular user
  ADMIN     // System administrator
}

enum AccountRole {
  ADMIN     // Can manage team, billing, and all settings (but not transfer ownership)
  EDITOR    // Can create/edit/delete scans
  VIEWER    // Read-only access to scans
}

enum AccountPermission {
  // Scan permissions
  SCAN_CREATE
  SCAN_VIEW
  SCAN_EDIT
  SCAN_DELETE
  
  // Team permissions
  TEAM_VIEW
  TEAM_INVITE
  TEAM_REMOVE
  
  // Billing permissions
  BILLING_VIEW
  BILLING_MANAGE
  
  // Settings permissions
  SETTINGS_VIEW
  SETTINGS_EDIT
}

enum Category {
  TOYS
  BABY_PRODUCTS
  COSMETICS_PERSONAL_CARE
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ScanStatus {
  QUEUED      // Waiting in queue
  PROCESSING  // Worker is analyzing
  COMPLETED   // Analysis finished successfully
  FAILED      // Analysis failed
}

enum Criticality {
  CRITICAL
  WARNING
  RECOMMENDATION
}

enum IssueStatus {
  PASSED
  FAILED
  WARNING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
